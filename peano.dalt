THEORY Peano Arithmetic

# Second Order Theory of Peano Arithmetic 
# with Addition and Multiplication as Definitions

AXIOM nat0                  -- 0∈ω

AXIOM 0notsuccessor         -- ¬(n∈ω)
  HYPOTHESIS                -- (S∘n)=0

AXIOM reflexive             -- x
  HYPOTHESIS                -- x

THEOREM id                  -- x=x
  EQUAL AXIOM reflexive     -- x=x
  QED

AXIOM symmetric             -- y=x
  HYPOTHESIS                -- x=y

AXIOM transitive            -- x=z 
  HYPOTHESIS                -- x=y 
  HYPOTHESIS                -- y=z 

AXIOM closed                -- (S∘n)∈ω

AXIOM injectiona            -- (S∘n)=(S∘m)
  HYPOTHESIS                -- n=m 
AXIOM injectionb            -- n=m
  HYPOTHESIS                -- (S∘n)=(S∘m) 

AXIOM induction             -- ∀n∘(φ∘n)
  HYPOTHESIS                -- φ∘0
  HYPOTHESIS                -- n∈ω
  HYPOTHESIS                -- (φ∘n)→(φ∘(S∘n))

# Addition
# In some systems, the following 2 axioms would actually be definitions, 
# but we don't have the ability to use a hypothesis in a definition, so they 
# are axioms; this is a choice. We can recreate the equality 
# using the EQUAL command, and will do so in Lemma add2xeq. We could also 
# have chosed to Define addition and prove the Hypothesis a+0 yields a.
AXIOM add1                  -- a
  HYPOTHESIS                -- a+0
AXIOM add2                  -- (S∘(a+b))
  HYPOTHESIS                -- a+(S∘b)

# Typically, the symmetric axiom is used to swap right and left hand sides of 
# equalities (by people), and we use it in this Lemma for that purpose.
LEMMA add2xeq               -- (S∘(a+b))=(a+(S∘b))
  EQUAL AXIOM add2          -- (a+(S∘b))=(S∘(a+b))
  AXIOM symmetric 1         -- (S∘(a+b))=(a+(S∘b))
  QED

# The reverse of addition's 'definition' will come in handy
THEOREM add2x               -- a+(S∘b)
  HYPOTHESIS                -- S∘(a+b)
  SUBTERM LEMMA add2xeq 1   -- a+(S∘b)
  QED

# Prove Associativity of Addition
#  The Base Case; adding 0 is associative
LEMMA add_assoc_1           -- ((x+y)+0)=(x+(y+0))
  HYPOTHESIS                -- ((x+y)+0)=(x+(y+0))
  SUBTERM AXIOM add1 1      -- ((x+y)+0)=(x+y)
  SUBTERM AXIOM add1 2      -- (x+y)=(x+y)
  QEDBY THEOREM id
#  The Induction Case; if we assume adding z is associative, 
# we can prove that adding the successor of z is also associative
LEMMA add_assoc_2           -- ((x+y)+(S∘z))=(x+(y+(S∘z)))
  HYPOTHESIS                -- ((x+y)+z)=(x+(y+z))
  AXIOM injectiona 1        -- (S∘((x+y)+z))=(S∘(x+(y+z)))
  SUBTERM THEOREM add2x 2   -- ((x+y)+(S∘z))=(S∘(x+(y+z)))
  SUBTERM THEOREM add2x 3   -- ((x+y)+(S∘z))=(x+(S∘(y+z)))
  SUBTERM THEOREM add2x 4   -- ((x+y)+(S∘z))=(x+(y+(S∘z)))
  QED
#  The Final Proof; since the base case (0) and the induction 
# case (z→S∘z) must be proven separately, the Induction command
# allows us to bring these together and show the hypothesis of the 
# Induction Case is true (for all z)
THEOREM add_assoc           -- ((x+y)+z)=(x+(y+z))
  LEMMA add_assoc_1         -- ((x+y)+0)=(x+(y+0))
  HYPOTHESIS                -- ((x+y)+z)=(x+(y+z))
  LEMMA add_assoc_2 2       -- ((x+y)+(S∘z))=(x+(y+(S∘z)))
  INDUCTION 1 2 3 0 z S∘z   -- ((x+y)+z)=(x+(y+z))
  QEDBY INDUCTION

# Prove Commutativity of Addition
#  The Zero Case; not sure if we actually need this
LEMMA add_com_1             -- (0+0)=(0+0)
  HYPOTHESIS                -- (0+0)=(0+0)
  SUBTERM AXIOM add1 1      -- 0=(0+0)
  SUBTERM AXIOM add1 2      -- 0=0
  QEDBY THEOREM id
#  The Base Case
LEMMA add_com_2             -- (x+0)=(0+x)
  HYPOTHESIS                -- (x+0)=(0+x)
  SUBTERM AXIOM add1 1      -- x=(0+x)
  SUBTERM AXIOM add1 2      -- x=x
  QEDBY THEOREM id
# The Induction Case
LEMMA add_com_3             -- (x+(S∘y))=((S∘y)+x)
  HYPOTHESIS                -- (x+y)=(y+x)
  AXIOM injectiona 1        -- (S∘(x+y))=(S∘(y+x))
  SUBTERM THEOREM add2x 2   -- (x+(S∘y))=(S∘(y+x))
  SUBTERM HYPOTHESIS 1 3    -- (x+(S∘y))=(S∘(x+y))
  SUBTERM THEOREM add2x 4   -- (x+(S∘y))=(x+(S∘y))
  SUBTERM HYPOTHESIS 1 5    -- (x+(S∘y))=((S∘y)+x)
  QED
#  The Final Proof
THEOREM add_com             -- (x+y)=(y+x)
  LEMMA add_com_2           -- (x+0)=(0+x)
  HYPOTHESIS                -- (x+y)=(y+x)
  LEMMA add_com_3 2         -- (x+(S∘y))=((S∘y)+x)
  INDUCTION 1 2 3 0 y S∘y   -- (x+y)=(y+x)
  QEDBY INDUCTION

# Multiplication
AXIOM mul1                  -- 0
  HYPOTHESIS                -- a×0
AXIOM mul2                  -- (a×b)+a 
  HYPOTHESIS                -- a×(S∘b)

# Associativity of Multiplication

# Commutativity of Multiplication

